
1. 
city_temperature = [30,31,29,28,29,30,31]
print(city_temperature)
2. 
daily_sales = [100, 200, 300, 400, 500, 600, 700]
total_sales = sum(daily_sales)
average_sales = total_sales / len(daily_sales)
print(average_sales)
3. 
daily_stock = [100, 200, 300, 400, 500, 600, 700]
min_value = min(daily_stock)
print(min_value)
max_value = max(daily_stock)
print(max_value)
4. 
marks = [80,  90, 100]
reverse_marks =  marks.reverse()
print(marks)
5. 
import random

number = []
for musabika in range(3): 
    random_number = random.randint(1, 3)
    number.append(random_number)
    for numbers in number: 
        if numbers % 2 == 0:
            print(numbers,"this number is even")
        else:
            print(numbers,"this number is odd")
6. 
# Initialize a 3x3 Tic-Tac-Toe board as a 2D array (list of lists)
board = [
    ["", "", ""],
    ["", "", ""],
    ["", "", ""]
]

def print_board(board):
    """ Function to print the Tic-Tac-Toe board in a readable format """
    for row in board:
        print(row)
    print()

def check_winner(board):
    """ Function to check if there's a winner """
    # Check rows for a winner
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != "":
            return row[0]  # Return the winner ('X' or 'O')

    # Check columns for a winner
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != "":
            return board[0][col]  # Return the winner ('X' or 'O')

    # Check diagonals for a winner
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != "":
        return board[0][0]  # Return the winner ('X' or 'O')

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != "":
        return board[0][2]  # Return the winner ('X' or 'O')

    # No winner yet
    return None

# Example to simulate some moves
board[0][0] = 'X'
board[0][1] = 'O'
board[0][2] = 'X'
board[1][0] = 'O'
board[1][1] = 'X'
board[1][2] = 'O'
board[2][0] = 'X'

# Print the current board
print_board(board)

# Check if there's a winner
winner = check_winner(board)

if winner:
    print(f"Player {winner} wins!")
else:
    print("No winner yet.")
7. 
sales = [
    [150, 200, 220, 180, 250, 300, 190],    
]
def print_sales(sales_data):
    for product_sales in sales_data:
        print(f"week Products: {product_sales}")
print_sales(sales)
8. 
image = [
    [[123, 234, 45], [255, 0, 0], [128, 128, 128]], 
    [[0, 255, 0], [0, 0, 255], [255, 255, 255]],    
    [[10, 20, 30], [40, 50, 60], [70, 80, 90]]      
]

def invert_colors(image):
    inverted_image = []
    
    for row in image:
        inverted_row = []
        for pixel in row:
            inverted_pixel = [255 - channel for channel in pixel]
            inverted_row.append(inverted_pixel)
        inverted_image.append(inverted_row)
    
    return inverted_image

def print_image(image):
    
    for row in image:
        print(row)


print("Original Image:")
print_image(image)

inverted_image = invert_colors(image)

print("\nInverted Image:")
print_image(inverted_image)

9.
marks = [
    [85, 90, 78],  # Student 1: [Math, Science, English]
    [88, 76, 92],  # Student 2: [Math, Science, English]
    [70, 80, 65],  # Student 3: [Math, Science, English]
    [95, 89, 96]   # Student 4: [Math, Science, English]
]

def calculate_total_marks(marks):
    
    total_marks = []
    
    for student_marks in marks:
        total = sum(student_marks)  
        total_marks.append(total)    
    
    return total_marks

def print_total_marks(total_marks):
    
    for student_index, total in enumerate(total_marks, 1):
        print(f"Student {student_index} Total Marks: {total}")


total_marks = calculate_total_marks(marks)

print_total_marks(total_marks)

temperatures = [
    [30, 32, 31, 29, 30, 31, 32],  # City 1: Temperatures for 7 days
    [25, 26, 27, 26, 28, 29, 27],  # City 2: Temperatures for 7 days
    [15, 17, 16, 16, 15, 16, 18],  # City 3: Temperatures for 7 days
    [22, 23, 24, 22, 21, 23, 24]   # City 4: Temperatures for 7 days
]

def calculate_average_temperatures(temps):
    """ Function to calculate average temperature for each city """
    average_temperatures = []
    
    for city_temps in temps:
        total = sum(city_temps)  # Sum the temperatures for each city
        average = total / len(city_temps)  # Calculate average for the city
        average_temperatures.append(average)  # Store the average
    
    return average_temperatures

def print_average_temperatures(average_temperatures):
    """ Function to print the average temperature for each city """
    for city_index, avg_temp in enumerate(average_temperatures, 1):
        print(f"City {city_index} Average Temperature: {avg_temp:.2f}°C")

average_temperatures = calculate_average_temperatures(temperatures)

print_average_temperatures(average_temperatures)

10. 

temperatures = [
    [30, 32, 31, 29, 30, 31, 32],  # City 1: Temperatures for 7 days
    [25, 26, 27, 26, 28, 29, 27],  # City 2: Temperatures for 7 days
    [15, 17, 16, 16, 15, 16, 18],  # City 3: Temperatures for 7 days
    [22, 23, 24, 22, 21, 23, 24]   # City 4: Temperatures for 7 days
]

def calculate_average_temperatures(temps):
    """ Function to calculate average temperature for each city """
    average_temperatures = []
    
    for city_temps in temps:
        total = sum(city_temps)  # Sum the temperatures for each city
        average = total / len(city_temps)  # Calculate average for the city
        average_temperatures.append(average)  # Store the average
    
    return average_temperatures

def print_average_temperatures(average_temperatures):
    """ Function to print the average temperature for each city """
    for city_index, avg_temp in enumerate(average_temperatures, 1):
        print(f"City {city_index} Average Temperature: {avg_temp:.2f}°C")

average_temperatures = calculate_average_temperatures(temperatures)

print_average_temperatures(average_temperatures)

1. 
# List of people who attended the meeting
attendees = ["Alice", "Bob", "Charlie", "David"]

# Add a new attendee
new_attendee = "Eve"
attendees.append(new_attendee)

# Print updated list of attendees
print("Updated Attendees List:", attendees)

2. 
# Shopping list
shopping_list = ["Milk", "Eggs", "Bread", "Butter", "Cheese"]

# Remove an item from the list
item_to_remove = "Butter"
shopping_list.remove(item_to_remove)

# Print updated shopping list
print("Updated Shopping List:", shopping_list)

3. 
# List of ages
ages = [34, 12, 45, 23, 67, 28]

# Sort ages in ascending order
ages.sort()

# Print sorted ages
print("Sorted Ages:", ages)

4. 
# To-do list
todo_list = ["Finish project", "Call mom", "Buy groceries", "Clean room"]

# Mark task as completed and remove it
completed_task = "Buy groceries"
todo_list.remove(completed_task)

# Print updated to-do list
print("Updated To-Do List:", todo_list)

5. 
# Two lists of friends
friends_list1 = ["Alice", "Bob", "Charlie", "David"]
friends_list2 = ["Eve", "Frank", "Alice", "David"]

# Merge the two lists
merged_friends = friends_list1 + friends_list2

# Remove duplicates by converting to a set, then back to a list
merged_friends = list(set(merged_friends))

# Print merged list without duplicates
print("Merged Friends List:", merged_friends)

6. 
# List of students with name, age, and grade
students = [
    ["Alice", 20, 85],
    ["Bob", 21, 92],
    ["Charlie", 19, 78],
    ["David", 22, 88]
]

# Sort the list by grade (3rd element in each sublist)
students.sort(key=lambda student: student[2])

# Print the sorted list of students
print("Sorted Students by Grade:", students)

7. 
# 2D list of monthly expenses for 6 months for each category: Rent, Food, Utilities
expenses = [
    [1000, 1100, 1050, 1020, 1070, 1100],  # Rent
    [300, 320, 310, 330, 340, 325],        # Food
    [150, 140, 160, 155, 165, 170]         # Utilities
]

def calculate_average_expenses(expenses):
    """ Calculate average expenses per category """
    averages = []
    for category_expenses in expenses:
        avg = sum(category_expenses) / len(category_expenses)
        averages.append(avg)
    return averages

# Calculate the average monthly expense per category
average_expenses = calculate_average_expenses(expenses)

# Print the average expenses per category
print("Average Monthly Expenses per Category:", average_expenses)


8. 

 # 2D list representing a theater seating arrangement (5 rows, 4 seats per row)
seating = [
    ['O', 'O', 'O', 'O'],  # Row 1
    ['O', 'O', 'O', 'O'],  # Row 2
    ['O', 'O', 'O', 'O'],  # Row 3
    ['O', 'O', 'O', 'O'],  # Row 4
    ['O', 'O', 'O', 'O']   # Row 5
]

# Reserved seats (mark them as 'X')
seating[0][1] = 'X'  # Row 1, Seat 2
seating[2][3] = 'X'  # Row 3, Seat 4
seating[4][0] = 'X'  # Row 5, Seat 1

# Print the updated seating arrangement
print("Updated Seating Arrangement:")
for row in seating:
    print(row)

9. 
# List of products where each product contains: [Name, Price, Stock]
products = [
    ["Laptop", 1200, 5],
    ["Headphones", 200, 0],
    ["Keyboard", 100, 10],
    ["Mouse", 50, 2],
    ["Monitor", 300, 0]
]

# Filter products that are out of stock
in_stock_products = [product for product in products if product[2] > 0]

# Print the filtered list of products
print("Products In Stock:", in_stock_products)

10. 
# List of scores where each sublist contains scores from multiple games
scores = [
    ["Player 1", [10, 15, 20]],  # Player 1's scores
    ["Player 2", [20, 25, 30]],  # Player 2's scores
    ["Player 3", [5, 10, 15]]    # Player 3's scores
]

def find_winner(scores):
    """ Function to find the winner based on highest average score """
    highest_avg = 0
    winner = None
    for player in scores:
        player_name, player_scores = player
        avg_score = sum(player_scores) / len(player_scores)
        if avg_score > highest_avg:
            highest_avg = avg_score
            winner = player_name
    return winner, highest_avg

# Find the winner
winner, avg_score = find_winner(scores)

# Print the winner and their average score
print(f"The winner is {winner} with an average score of {avg_score:.2f}")

